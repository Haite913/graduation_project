import moment from "moment";
import getFomatConfig from "./getFormatConfig";
import isNumber from "./isNumber";
function getFormatValue(value, format, options = {}) {
  const { shouldReturnNA } = options;
  if (shouldReturnNA && (value === void 0 || value === null || value === "")) {
    return "N/A";
  }
  if (process.env.NODE_ENV !== "production") {
    if (value !== void 0 && value !== null && typeof value !== "string" && !isNumber(value, false)) {
      throw new TypeError("Expected the value to be a string or a number.");
    }
  }
  const formatConfig = getFomatConfig(format);
  if (!isFinite(value)) {
    return value;
  }
  switch (formatConfig.type) {
    case "date": {
      const dateFormat = formatConfig.value || "YYYY-MM-DD";
      return moment(Number(value) * 1e3).format(dateFormat);
    }
    case "rmb": {
      const precision = Number(formatConfig.value || 2);
      return Number((Number(value) / 100).toFixed(precision)).toLocaleString();
    }
    case "percent": {
      const precision = Number(formatConfig.value || 2);
      return `${(Number(value) * 100).toFixed(precision)}%`;
    }
    case "fixed": {
      const precision = Number(formatConfig.value || 2);
      return Number(value).toFixed(precision);
    }
    case "thousandSemicolon": {
      const precision = Number(formatConfig.value || 2);
      return Number(Number(value).toFixed(precision)).toLocaleString();
    }
    case "shortNumber": {
      const precision = Number(formatConfig.value || 2);
      const lastValue = Number(Number(value).toFixed(precision));
      const w = 1e4;
      const kw = 1e7;
      if (value >= w && value < kw) {
        return `${(Number(value) / w).toFixed(precision)}w`;
      }
      if (value >= kw) {
        return `${(Number(value) / kw).toFixed(precision)}kw`;
      }
      return lastValue;
    }
    default:
      return value;
  }
}
export {
  getFormatValue as default
};
