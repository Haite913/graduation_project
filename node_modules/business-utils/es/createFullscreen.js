const DOCUMENT_FULLSCREEN_EVENTS = [
  "fullscreenchange",
  "webkitfullscreenchange",
  "mozfullscreenchange",
  "MSFullscreenChange"
];
function createFullscreen(elementContext, documentContext, changeCallback = () => {
}) {
  const requestFullscreen = elementContext.requestFullscreen || elementContext.webkitRequestFullscreen || elementContext.mozRequestFullScreen || elementContext.msRequestFullscreen;
  const exitFullscreen = documentContext.exitFullscreen || documentContext.webkitExitFullscreen || documentContext.webkitCancelFullScreen || documentContext.mozCancelFullScreen || documentContext.msExitFullscreen;
  const isDomFullscreenSupported = !!requestFullscreen;
  for (let i = DOCUMENT_FULLSCREEN_EVENTS.length; i--; ) {
    documentContext.addEventListener(DOCUMENT_FULLSCREEN_EVENTS[i], changeCallback);
  }
  return {
    events: DOCUMENT_FULLSCREEN_EVENTS,
    get isDomFullscreenSupported() {
      return isDomFullscreenSupported;
    },
    requestFullscreen() {
      if (!isDomFullscreenSupported) {
        console.error("\u6D4F\u89C8\u5668\u4E0D\u652F\u6301\u5168\u5C4F\u64CD\u4F5C\u3002");
      }
      requestFullscreen.apply(elementContext);
    },
    exitFullscreen() {
      if (isDomFullscreenSupported) {
        exitFullscreen.apply(documentContext);
      }
    },
    get fullscreenElement() {
      return documentContext.fullscreenElement || documentContext.webkitCurrentFullScreenElement || documentContext.mozFullScreenElement || documentContext.msFullscreenElement;
    },
    remove() {
      for (let i = DOCUMENT_FULLSCREEN_EVENTS.length; i--; ) {
        documentContext.removeEventListener(DOCUMENT_FULLSCREEN_EVENTS[i], changeCallback);
      }
    }
  };
}
export {
  createFullscreen as default
};
