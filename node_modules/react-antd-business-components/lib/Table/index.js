"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const react = require("react");
const antd = require("antd");
const classnames = require("classnames");
const businessUtils = require("business-utils");
const jsxRuntime = require("react/jsx-runtime");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const classnames__default = /* @__PURE__ */ _interopDefaultLegacy(classnames);
const container = "rabc-table__container";
const tdNoWrap = "rabc-table__td-no-wrap";
const tdWrap = "rabc-table__td-wrap";
const styles = {
  container,
  tdNoWrap,
  tdWrap
};
const RTable = (props) => {
  var _a;
  const {
    className,
    scrollY,
    showPagination,
    rowKey,
    emptyFieldValue,
    pagination,
    columns = [],
    scroll,
    dataSource
  } = props;
  const lastColunms = react.useMemo(() => {
    return getLastColumns({
      columns,
      emptyFieldValue,
      styles
    });
  }, [columns, emptyFieldValue]);
  let lastRowKey = rowKey;
  if (!rowKey && ((_a = dataSource == null ? void 0 : dataSource[0]) == null ? void 0 : _a.id) !== void 0) {
    lastRowKey = "id";
  }
  let lastPagination = pagination;
  if (showPagination === false) {
    lastPagination = false;
  }
  return /* @__PURE__ */ jsxRuntime.jsx(antd.Table, {
    ...props,
    scroll: {
      x: true,
      y: scrollY,
      ...scroll
    },
    className: classnames__default.default(className, styles.container),
    dataSource,
    rowKey: lastRowKey,
    pagination: lastPagination,
    columns: lastColunms
  });
};
RTable.displayName = "RTable";
RTable.defaultProps = {
  showPagination: false,
  emptyFieldValue: "-"
};
function getLastColumns(options) {
  const {
    columns,
    emptyFieldValue,
    styles: styles2 = {}
  } = options;
  const leftColumns = [];
  const rightColumns = [];
  const centerColumns = [];
  columns.filter((c) => !c.hide).forEach((c) => {
    const {
      render
    } = c;
    const newColumn = {
      ...c,
      wrap: !!c.width,
      title: /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: styles2.th,
        style: {
          width: c.width
        },
        children: c.title
      }),
      render(text, record, index) {
        var _a;
        if ((text === void 0 || text === null) && !c.notDealEmptyValue) {
          return emptyFieldValue;
        }
        let lastText = ((_a = c.formatter) == null ? void 0 : _a.call(c, text)) || text;
        if ((typeof lastText === "string" || businessUtils.isNumber(lastText)) && typeof c.format === "string") {
          lastText = businessUtils.getFormatValue(lastText, c.format);
        }
        if (render) {
          lastText = render(lastText, record, index);
        }
        return /* @__PURE__ */ jsxRuntime.jsx("div", {
          style: {
            width: c.width
          },
          children: lastText
        });
      }
    };
    if (newColumn.wrap) {
      newColumn.className = classnames__default.default(c.className, styles2.tdWrap);
      delete newColumn.wrap;
    } else {
      newColumn.className = classnames__default.default(c.className, styles2.tdNoWrap);
    }
    if (newColumn.fixed === true || newColumn.fixed === "left") {
      leftColumns.push(newColumn);
    } else if (newColumn.fixed === "right") {
      rightColumns.push(newColumn);
    } else {
      centerColumns.push(newColumn);
    }
  });
  return leftColumns.concat(centerColumns).concat(rightColumns);
}
exports.default = RTable;
exports.getLastColumns = getLastColumns;
