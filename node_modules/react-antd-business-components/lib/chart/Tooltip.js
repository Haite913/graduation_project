"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const jsxRuntime = require("react/jsx-runtime");
const rechartsTooltip = "rabc-chart-tooltip__recharts-tooltip";
const rechartTooltipLabel = "rabc-chart-tooltip__rechart-tooltip-label";
const rechartsTooltipContent = "rabc-chart-tooltip__recharts-tooltip-content";
const rechartTooltipItemValue = "rabc-chart-tooltip__rechart-tooltip-item-value";
const styles = {
  rechartsTooltip,
  rechartTooltipLabel,
  rechartsTooltipContent,
  rechartTooltipItemValue
};
function RechartsTooltip(props) {
  const {
    active
  } = props;
  if (active) {
    const {
      isPercent,
      payload = [],
      label,
      formatter,
      unit,
      titleColor,
      numberColor
    } = props;
    let total = 0;
    if (isPercent) {
      total = payload.reduce((result, entry) => result + Number(entry.value), 0);
    }
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: styles.rechartsTooltip,
      children: [label && /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: styles.rechartTooltipLabel,
        style: {
          color: titleColor
        },
        children: [`${label}`, isPercent && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: ["\xA0(\u603B\u6570\uFF1A", total.toLocaleString(), ")"]
        })]
      }), /* @__PURE__ */ jsxRuntime.jsx("ul", {
        className: styles.rechartsTooltipContent,
        children: payload == null ? void 0 : payload.map((v, k) => {
          let lastUnit = unit;
          const {
            percent
          } = v.payload;
          const value = formatter ? formatter(v.value) : v.value;
          if (v.value === 0 || v.value === "N/A") {
            lastUnit = null;
          }
          return /* @__PURE__ */ jsxRuntime.jsxs("li", {
            children: [/* @__PURE__ */ jsxRuntime.jsxs("span", {
              className: styles.rechartTooltipItemTitle,
              style: {
                color: numberColor || v.stroke
              },
              children: [v.name, "\uFF1A"]
            }), /* @__PURE__ */ jsxRuntime.jsxs("span", {
              className: styles.rechartTooltipItemValue,
              children: [value.toLocaleString(), lastUnit, isPercent && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: ["\xA0(", `${(v.value / (total || 1) * 100).toFixed(2)}%`, ")"]
              }), percent && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: ["\xA0(", `${(percent * 100).toFixed(2)}%`, ")"]
              })]
            })]
          }, k);
        })
      })]
    });
  }
  return null;
}
exports.default = RechartsTooltip;
