"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const React = require("react");
const classnames = require("classnames");
const recharts = require("recharts");
const jsxRuntime = require("react/jsx-runtime");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefaultLegacy(React);
const classnames__default = /* @__PURE__ */ _interopDefaultLegacy(classnames);
const SIZE = 32;
const DISABLED_COLOR = "rgba(0,0,0,.25)";
class CustomizedLegend extends React__default.default.Component {
  renderIcon(data) {
    const {
      inactiveColor
    } = this.props;
    const halfSize = SIZE / 2;
    const sixthSize = SIZE / 6;
    const thirdSize = SIZE / 3;
    const color = (data.inactive ? inactiveColor : data.color) || DISABLED_COLOR;
    if (data.type === "plainline") {
      return /* @__PURE__ */ jsxRuntime.jsx("line", {
        strokeWidth: 4,
        fill: "none",
        stroke: color,
        strokeDasharray: data.payload.strokeDasharray,
        x1: 0,
        y1: halfSize,
        x2: SIZE,
        y2: halfSize,
        className: "recharts-legend-icon"
      });
    }
    if (data.type === "line") {
      return /* @__PURE__ */ jsxRuntime.jsx("path", {
        strokeWidth: 4,
        fill: "none",
        stroke: color,
        d: `M0,${halfSize}h${thirdSize}
            A${sixthSize},${sixthSize},0,1,1,${2 * thirdSize},${halfSize}
            H${SIZE}M${2 * thirdSize},${halfSize}
            A${sixthSize},${sixthSize},0,1,1,${thirdSize},${halfSize}`,
        className: "recharts-legend-icon"
      });
    }
    if (data.type === "rect") {
      return /* @__PURE__ */ jsxRuntime.jsx("path", {
        stroke: "none",
        fill: color,
        d: `M0,${SIZE / 8}h${SIZE}v${SIZE * 3 / 4}h${-SIZE}z`,
        className: "recharts-legend-icon"
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(recharts.Symbols, {
      fill: color,
      cx: halfSize,
      cy: halfSize,
      size: SIZE,
      sizeType: "diameter",
      type: data.type
    });
  }
  renderItems() {
    const {
      payload = [],
      customPayload = payload,
      iconSize,
      layout,
      onClick,
      formatter
    } = this.props;
    const viewBox = {
      x: 0,
      y: 0,
      width: SIZE,
      height: SIZE
    };
    const itemStyle = {
      display: layout === "horizontal" ? "inline-block" : "block",
      marginRight: 10
    };
    const svgStyle = {
      display: "inline-block",
      verticalAlign: "middle",
      marginRight: 4
    };
    const payloadMap = payload.reduce((acc, cur) => ({
      ...acc,
      [cur.dataKey]: cur
    }), {});
    return customPayload.map((customEntry, i) => {
      const entry = payloadMap[customEntry.dataKey] || customEntry;
      const finalFormatter = entry.formatter || formatter;
      const className = classnames__default.default({
        "recharts-legend-item": true,
        [`legend-item-${i}`]: true,
        inactive: entry.inactive
      });
      if (entry.type === "none") {
        return null;
      }
      return /* @__PURE__ */ jsxRuntime.jsxs("li", {
        className,
        style: {
          ...itemStyle,
          cursor: "pointer"
        },
        onClick: () => {
          onClick == null ? void 0 : onClick(entry);
        },
        children: [/* @__PURE__ */ jsxRuntime.jsx(recharts.Surface, {
          width: iconSize,
          height: iconSize,
          viewBox,
          style: svgStyle,
          children: this.renderIcon(entry)
        }), /* @__PURE__ */ jsxRuntime.jsx("span", {
          className: "recharts-legend-item-text",
          style: {
            color: !entry.color ? DISABLED_COLOR : ""
          },
          children: finalFormatter ? finalFormatter(entry.value, entry, i) : entry.value
        })]
      }, `legend-item-${i}`);
    });
  }
  render() {
    const {
      payload,
      customPayload = payload,
      layout,
      align
    } = this.props;
    if (!customPayload || !customPayload.length) {
      return null;
    }
    const finalStyle = {
      padding: 0,
      margin: 0,
      textAlign: layout === "horizontal" ? align : "left"
    };
    return /* @__PURE__ */ jsxRuntime.jsx("ul", {
      className: "recharts-default-legend",
      style: finalStyle,
      children: this.renderItems()
    });
  }
}
exports.default = CustomizedLegend;
