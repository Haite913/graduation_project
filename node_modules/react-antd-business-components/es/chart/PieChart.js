import { PieChart as PieChart$1, Tooltip, Pie, Cell, ResponsiveContainer } from "recharts";
import RechartsTooltip from "./Tooltip";
import { colors } from "./VarietyChart";
import { jsxs, jsx, Fragment } from "react/jsx-runtime";
const PieChart = (props) => {
  var _a;
  const {
    width = 250,
    height = 250,
    data: outerData = [],
    formatter = (v) => v,
    valuePrecision = 0,
    percentPrecision = 0,
    useResponsiveContainer,
    showLabel,
    outerRadius,
    innerRadius,
    ...restProps
  } = props;
  const lastFormatter = (value) => formatter(Number(value.toFixed(valuePrecision))).toLocaleString();
  let data = [].concat(outerData).filter(Boolean);
  if (!((_a = data[0]) == null ? void 0 : _a.chartData)) {
    data = [{
      chartData: data
    }];
  }
  const chartContent = /* @__PURE__ */ jsxs(PieChart$1, {
    width,
    height,
    ...restProps,
    children: [/* @__PURE__ */ jsx(Tooltip, {
      content: /* @__PURE__ */ jsx(RechartsTooltip, {}),
      formatter: lastFormatter
    }), data.map((d, index) => {
      const {
        chartData = [],
        ...rest
      } = d;
      const dataKey = rest.dataKey || "value";
      const allValueCounts = chartData.reduce((counts, currentData) => counts + currentData[dataKey], 0);
      const lastColors = colors.slice();
      chartData.forEach((c) => {
        if (c.fill) {
          lastColors.unshift(c.fill);
        }
        c.percent = c[dataKey] / allValueCounts;
      });
      let label = ({
        name,
        value,
        percent
      }) => {
        const lastValue = lastFormatter(value);
        if (rest.label === "percent") {
          return `${(percent * 100).toFixed(percentPrecision)}%`;
        }
        if (rest.label === "name") {
          return name;
        }
        if (rest.label === "value") {
          return lastValue;
        }
        return `${name} (${(percent * 100).toFixed(percentPrecision)}%)`;
      };
      if (rest.label === false || !showLabel) {
        label = false;
      }
      return /* @__PURE__ */ jsx(Pie, {
        outerRadius,
        innerRadius,
        fill: lastColors[index],
        ...rest,
        dataKey,
        data: chartData,
        label,
        animationDuration: 500,
        isAnimationActive: false,
        children: chartData.map((_, index2) => /* @__PURE__ */ jsx(Cell, {
          fill: lastColors[index2]
        }, `cell-${index2}`))
      }, index.toString());
    })]
  });
  if (useResponsiveContainer) {
    return /* @__PURE__ */ jsx("div", {
      style: {
        height
      },
      children: /* @__PURE__ */ jsx(ResponsiveContainer, {
        width: "100%",
        height,
        children: chartContent
      })
    });
  }
  return /* @__PURE__ */ jsx(Fragment, {
    children: chartContent
  });
};
PieChart.displayName = "PieChart";
PieChart.defaultProps = {
  useResponsiveContainer: true,
  height: 300,
  showLabel: true,
  valuePrecision: 2,
  percentPrecision: 2
};
export {
  PieChart as default
};
