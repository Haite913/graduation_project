/// <reference types="react" />
import { PieProps } from 'recharts';
import type { Overwrite } from '../interface';
export interface PieChartData {
    /**
     * 默认的 nameKey 为 `name`
     * Pie 类目文案
     */
    name?: string;
    /**
     * 默认的 dataKey 为 `value`
     * Pie 指定的字段数据源
     * string 必须是数字类型的字符串
     */
    dataKey?: number | string;
    /**
     * 饼图的用来计算比例的数值
     */
    value?: number | string;
    /**
     * 饼图弧形填充的颜色
     */
    fill?: string;
    /**
     * 其他的属性是自定义的，dataKey 会用到。
     */
    [key: string]: any;
}
export declare type PieChartDataItem = {
    /**
     * 默认的 nameKey 为 `name`
     * Pie 类目文案
     */
    nameKey?: string;
    /**
     * 默认的 dataKey 为 `value`
     * Pie 指定的字段数据源
     */
    dataKey?: string;
    chartData: PieChartData[];
};
declare type OverwritePieChartDataItem = Overwrite<PieProps, PieChartDataItem>;
export declare type PieChartDataSource = PieChartData[] | OverwritePieChartDataItem | OverwritePieChartDataItem[];
export interface PieChartProps {
    /**
     * 数据源
     */
    data?: PieChartDataSource;
    /**
     * 是否使用响应式，开启的话浏览器窗口大小改变会响应式适应
     */
    useResponsiveContainer?: boolean;
    /**
     * 是否展示饼图标签
     */
    showLabel?: boolean;
    /**
     * value 格式化函数，目前的应用场景来看比较少用到。
     */
    formatter?: Function;
    /**
     * 宽度
     */
    width?: number;
    /**
     * 高度
     */
    height?: number;
    /**
     * 图表数据精度度，即保留的小数点数
     */
    valuePrecision?: number;
    /**
     * 图表百分比的，精确度
     */
    percentPrecision?: number;
    /**
     * 外直径
     */
    outerRadius?: number;
    /**
     * 内直径
     */
    innerRadius?: number;
    [key: string]: any;
}
declare const PieChart: {
    (props: PieChartProps): JSX.Element;
    defaultProps?: Record<string, any>;
    displayName: string;
};
export default PieChart;
